use crate::Call;

#[derive(Debug, Serialize, Deserialize,Clone,PartialEq)]
pub enum Country {
    Alaska,
    Andorra,
    Angola,
    Argentina,
    Australia,
    Austria,
    Azores,
    Bahamas,
    Bahrain,
    Bhutan,
    Bolivia,
    BosniaAndHerzegovina,
    Botswana,
    Brazil,
    Canada,
    CapeVerde,
    Chile,
    China,
    Comoros,
    Cuba,
    Cypress,
    Czechia,
    France,
    Gambia,
    Germany,
    HongKong,
    Hungary,
    India,
    Israel,
    Italy,
    Liberia,
    Lithuania,
    Morocco,
    Mozambique,
    Nauru,
    Netherlands,
    Oman,
    Pakistan,
    Philippines,
    Poland,
    Portugal,
    Qatar,
    Russia,
    Slovakia,
    Slovenia,
    SouthKorea,
    Spain,
    Taiwan,
    Tonga,
    Ukraine,
    UnitedArabEmirates,
    UnitedKingdom,
    UnitedStates,
    Uruguay,
    WorldMeteorologicalOrganization,
}

impl Country {
    pub fn code(&self) -> &'static str {
        match self {
            Country::Alaska => "us",
            Country::Andorra => "ad",
            Country::Angola => "ao",
            Country::Argentina => "ar",
            Country::Australia => "au",
            Country::Austria => "at",
            Country::Azores => "pz",
            Country::Bahamas => "bs",
            Country::Bahrain => "bh",
            Country::Bhutan => "bt",
            Country::Bolivia => "bo",
            Country::BosniaAndHerzegovina => "ba",
            Country::Botswana => "bw",
            Country::Brazil => "br",
            Country::Canada => "ca",
            Country::CapeVerde => "cv",
            Country::Chile => "cl",
            Country::China => "cn",
            Country::Comoros => "km",
            Country::Cuba => "cu",
            Country::Cypress => "cy",
            Country::Czechia => "cz",
            Country::France => "fr",
            Country::Gambia => "gm",
            Country::Germany => "de",
            Country::HongKong => "hk",
            Country::Hungary => "hu",
            Country::India => "in",
            Country::Israel => "il",
            Country::Italy => "it",
            Country::Liberia => "lr",
            Country::Lithuania => "lt",
            Country::Morocco => "ma",
            Country::Mozambique => "mz",
            Country::Nauru => "nr",
            Country::Netherlands => "nl",
            Country::Oman => "om",
            Country::Pakistan => "pk",
            Country::Philippines => "ph",
            Country::Poland => "pl",
            Country::Portugal => "pt",
            Country::Qatar => "qa",
            Country::Russia => "ru",
            Country::Slovakia => "sk",
            Country::Slovenia => "si",
            Country::SouthKorea => "kr",
            Country::Spain => "es",
            Country::Taiwan => "tw",
            Country::Tonga => "to",
            Country::Ukraine => "ua",
            Country::UnitedArabEmirates => "ae",
            Country::UnitedKingdom => "gb",
            Country::UnitedStates => "us",
            Country::Uruguay => "uy",
            Country::WorldMeteorologicalOrganization => "un",
        }
    }
    pub fn name(&self) -> &'static str {
        match self {
            Country::Alaska => "Alaska",
            Country::Andorra => "Andorra",
            Country::Angola => "Angola",
            Country::Argentina => "Argentina",
            Country::Australia => "Australia",
            Country::Austria => "Austria",
            Country::Azores => "Azores",
            Country::Bahamas => "Bahamas",
            Country::Bahrain => "Bahrain",
            Country::Bhutan => "Bhutan",
            Country::Bolivia => "Bolivia",
            Country::BosniaAndHerzegovina => "Bosnia and Herzegovina",
            Country::Botswana => "Botswana",
            Country::Brazil => "Brazil",
            Country::Canada => "Canada",
            Country::CapeVerde => "CapeVerde",
            Country::Chile => "Chile",
            Country::China => "China",
            Country::Comoros => "Comoros",
            Country::Cuba => "Cuba",
            Country::Cypress => "Cypress",
            Country::Czechia => "Czechia",
            Country::France => "France",
            Country::Gambia => "Gambia",
            Country::Germany => "Germany",
            Country::HongKong => "Hong Kong",
            Country::Hungary => "Hungary",
            Country::India => "India",
            Country::Israel => "Israel",
            Country::Italy => "Italy",
            Country::Liberia => "Liberia",
            Country::Lithuania => "Lithuania",
            Country::Morocco => "Morocco",
            Country::Mozambique => "Mozambique",
            Country::Nauru => "Nauru",
            Country::Netherlands => "Netherlands",
            Country::Oman => "Oman",
            Country::Pakistan => "Pakistan",
            Country::Philippines => "Philippines",
            Country::Poland => "Poland",
            Country::Portugal => "Portugal",
            Country::Qatar => "Qatar",
            Country::Russia => "Russia",
            Country::Slovakia => "Slovakia",
            Country::Slovenia => "Slovenia",
            Country::SouthKorea => "South Korea",
            Country::Spain => "Spain",
            Country::Taiwan => "Taiwan",
            Country::Tonga => "Tonga",
            Country::Ukraine => "Ukraine",
            Country::UnitedArabEmirates => "United Arab Emirates",
            Country::UnitedKingdom => "United Kingdom",
            Country::UnitedStates => "United States",
            Country::Uruguay => "Uruguay",
            Country::WorldMeteorologicalOrganization => "World Meteorological Organization",
        }
    }
}

pub trait CountryInfo {
    fn country(&self) -> Result<Country,&'static str>;
}

impl CountryInfo for Call {
    fn country(&self) -> Result<Country,&'static str> {
        let prefix: Vec<char> = self.call().chars().take(2).collect();

        match prefix.as_slice() {
            [s, _] if s == &'1' || s == &'0' || s == &'Q' => Err("invalid callsign prefix"),
            [_, s] if s == &'1' || s == &'0' => Err("invalid callsign prefix"),
            ['A', s] if s >= &'A' && s <= &'L' => Ok(Country::UnitedStates),
            ['A', s] if s >= &'M' && s <= &'O' => Ok(Country::Spain),
            ['A', s] if s >= &'P' && s <= &'S' => Ok(Country::Pakistan),
            ['A', s] if s >= &'T' && s <= &'W' => Ok(Country::India),
            ['A', 'X'] => Ok(Country::Australia),
            ['A', s] if s >= &'Y' && s <= &'Z' => Ok(Country::Argentina),
            ['A', '2'] => Ok(Country::Botswana),
            ['A', '3'] => Ok(Country::Tonga),
            ['A', '4'] => Ok(Country::Oman),
            ['A', '5'] => Ok(Country::Bhutan),
            ['A', '6'] => Ok(Country::UnitedArabEmirates),
            ['A', '7'] => Ok(Country::Qatar),
            ['A', '8'] => Ok(Country::Liberia),
            ['A', '9'] => Ok(Country::Bahrain),
            ['B', s] if s >= &'M' && s <= &'Q' => Ok(Country::Taiwan),
            ['B', s] if s >= &'U' && s <= &'X' => Ok(Country::Taiwan),
            ['B', _] => Ok(Country::China),
            ['C', s] if s >= &'A' && s <= &'E' => Ok(Country::Chile),
            ['C', s] if s >= &'F' && s <= &'K' => Ok(Country::Canada),
            ['C', s] if s >= &'L' && s <= &'M' => Ok(Country::Cuba),
            ['C', 'N'] => Ok(Country::Morocco),
            ['C', 'O'] => Ok(Country::Cuba),
            ['C', 'P'] => Ok(Country::Bolivia),
            ['C', 'U'] => Ok(Country::Azores),
            ['C', s] if s >= &'Q' && s <= &'U' => Ok(Country::Portugal),
            ['C', s] if s >= &'V' && s <= &'X' => Ok(Country::Uruguay),
            ['C', s] if s >= &'Y' && s <= &'Z' => Ok(Country::Canada),
            ['C', '2'] => Ok(Country::Nauru),
            ['C', '3'] => Ok(Country::Andorra),
            ['C', '4'] => Ok(Country::Cypress),
            ['C', '5'] => Ok(Country::Gambia),
            ['C', '6'] => Ok(Country::Bahamas),
            ['C', '7'] => Ok(Country::WorldMeteorologicalOrganization),
            ['C', s] if s >= &'8' && s <= &'9' => Ok(Country::Mozambique),
            ['D', s] if s >= &'A' && s <= &'R' => Ok(Country::Germany),
            ['D', s] if s >= &'S' && s <= &'T' => Ok(Country::SouthKorea),
            ['D', s] if s >= &'U' && s <= &'Z' => Ok(Country::Philippines),
            ['D', s] if s >= &'2' && s <= &'3' => Ok(Country::Angola),
            ['D', '4'] => Ok(Country::CapeVerde),
            ['D', '5'] => Ok(Country::Liberia),
            ['D', '6'] => Ok(Country::Comoros),
            ['D', s] if s >= &'7' && s <= &'9' => Ok(Country::SouthKorea),
            ['E','7'] => Ok(Country::BosniaAndHerzegovina),
            ['F', _] => Ok(Country::France),
            ['H', 'A'] => Ok(Country::Hungary),
            ['I', _] => Ok(Country::Italy),
            ['K', _] => Ok(Country::UnitedStates),
            ['L', s] if s >= &'O' && s <= &'W' => Ok(Country::Argentina),
            ['L', 'Y'] => Ok(Country::Lithuania),
            ['N', _] => Ok(Country::UnitedStates),
            ['O', 'E'] => Ok(Country::Austria),
            ['O', s] if s >= &'K' && s <= &'L' => Ok(Country::Czechia),
            ['O', 'M'] => Ok(Country::Slovakia),
            ['P', s] if s >= &'A' && s <= &'I' => Ok(Country::Netherlands),
            ['P', s] if s >= &'P' && s <= &'Y' => Ok(Country::Brazil),
            ['R', _] => Ok(Country::Russia),
            ['S', s] if s >= &'N' && s <= &'R' => Ok(Country::Poland),
            ['S', '5'] => Ok(Country::Slovenia),
            ['U', s] if s >= &'R' && s <= &'Z' => Ok(Country::Ukraine),
            ['V', s] if s >= &'A' && s <= &'G' => Ok(Country::Canada),
            ['V', s] if s >= &'H' && s <= &'N' => Ok(Country::Australia),
            ['V', 'O'] => Ok(Country::Canada),
            ['V', s] if s >= &'P' && s <= &'Q' => Ok(Country::UnitedKingdom),
            ['V', 'R'] => Ok(Country::HongKong),
            ['V', 'S'] => Ok(Country::UnitedKingdom),
            ['V', s] if s >= &'T' && s <= &'W' => Ok(Country::India),
            ['V', s] if s >= &'X' && s <= &'Y' => Ok(Country::Canada),
            ['W', _] => Ok(Country::UnitedStates),
            ['4','Z'] => Ok(Country::Israel),
            _ => {
                Err("unknown country prefix")
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_name() {
        assert_eq!(Country::Canada.name(),"Canada");
    }
    #[test]
    fn test_countrycode() {
        assert_eq!(Country::UnitedStates.code(),"us");
    }

    // CountryInfo trait
    #[test]
    fn test_callsign_country() {
        let call = Call::new("KK4WJS");
        assert_eq!(call.country().unwrap(), Country::UnitedStates);
    }

}